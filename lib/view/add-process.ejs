<!DOCTYPE html>
<html>

<head>
  <title>Add Project - NDA</title>
  <link rel="icon" type="image/icon" href="../images?name=nda_logo.png" />
  <style>
    body {
      /* background-color: antiquewhite; */
      font-family: sans-serif;
    }

    .card {
      background-color: #fff;
      border-radius: 10px;
      max-width: 100%;
      margin: 20px;
      border: 2px solid #d4d4d4;
      padding: 10px 20px;
    }

    ul {
      list-style: none;
      padding: 0;
    }

    li {
      background-color: #e8e8e8;
      border: 0;
      border-radius: 5px;
      color: #313131;
      font-size: 12px;
      font-weight: bold;
      padding: 8px 18px;
      letter-spacing: 1px;
      margin-bottom: 5px;
      width: fit-content;
      float: left;
    }

    li:not(:last-child) {
      margin-right: 5px;
    }

    .flex-row {
      display: flex;
    }

    .flex-items--title {
      width: 25%;
    }

    .flex-items--content {
      width: 75%;
    }

    /* Style inputs with type="text", select elements and textareas */
    input[type=text],
    input[type=file],
    select,
    textarea {
      width: 100%;
      /* Full width */
      padding: 12px;
      /* Some padding */
      border: 1px solid #ccc;
      /* Gray border */
      border-radius: 4px;
      /* Rounded borders */
      box-sizing: border-box;
      /* Make sure that padding and width stays in place */
      margin-top: 6px;
      /* Add a top margin */
      margin-bottom: 16px;
      /* Bottom margin */
      resize: vertical
        /* Allow the user to vertically resize the textarea (not horizontally) */
    }

    /* When moving the mouse over the submit button, add a darker green color */
    input[type=submit]:hover {
      background-color: #45a049;
    }

    /* Add a background color and some padding around the form */
    .container {
      border-radius: 5px;
      padding: 20px;
    }

    .table-heading {
      align-content: center;
      padding-left: 45%;
      color: black;
    }

    .button-green {
      background-color: #04AA6D;
      color: white;
      padding: 12 px 20 px;
      border: none;
      border-radius: 4 px;
      cursor: pointer;
      font-size: 20px;
    }

    .button-green:hover {
      background-color: #45a049;
    }

    .button-black {
      background-color: #0f0f0fef;
      color: white;
      padding: 12 px 20 px;
      border: none;
      border-radius: 4 px;
      cursor: pointer;
      font-size: 20px;
    }

    .button-black:hover {
      background-color: #565c5c;
    }

    .error-message {
      color: #eb1c0d;
    }

    .success-message {
      float: right;
      color: #45a049;
      animation: blinker 1s linear infinite;
    }

    @keyframes blinker {
      50% {
        opacity: 0;
      }
    }

    .tooltip {
      position: relative;
      display: inline-block;
    }

    .tooltip .tooltiptext {
      visibility: hidden;
      width: 600px;
      background-color: #45a049;
      color: #fff;
      text-align: center;
      border-radius: 6px;
      padding: 5px 0;

      /* Position the tooltip */
      position: absolute;
      z-index: 1;
      text-align: left;
      padding-left: 2px;
      margin-left: 2px;
    }

    .tooltip:hover .tooltiptext {
      visibility: visible;
      text-align: left;
      padding-left: 2px;
      margin-left: 2px;
    }

    .required-field {
      color: red;
    }

    .note-field {
      color: #04AA6D;
    }

    .loader {
      width: 100%;
      height: 100vh;
      text-align: center;
      position: fixed;
      display: block !important;
    }

    .loader-image {
      width: 20vh;
      height: 20vh;
    }

    .addproject-loading {
      visibility: hidden;
    }

    .error-input {
      border-color: indianred !important;
      border-width: revert !important;
    }

    .action-button {
      width: 25px;
      height: 26px;
    }

    .button-sm-red {
      background-color: #f12c12;
      color: white;
      padding: 12 px 20 px;
      border: none;
      border-radius: 4 px;
      cursor: pointer;
      font-size: 16px;
    }

    .button-sm-red:hover {
      background-color: #c44130;
    }

    .project-basepath-tooltip {
      width: 403px !important;
    }

    .project-startpath-tooltip {
      width: 302px !important;
    }

    .cronjob-tooltip {
      width: 294px !important;
    }

    .add-cronjob-tooltip {
      width: 170px !important;
    }

    .packages-tooltip {
      width: 534px !important;
    }

    .bootstart-tooltip {
      width: 600px !important;
    }

    .port-tooltip {
      width: 580px !important;
    }

    .port-reason-tooltip {
      width: 572px !important;
    }
  </style>
  <script type="text/javascript" language="JavaScript">
    function enableLoader(validate, event) {
      if (event) {
        event.preventDefault();
      }
      if (validate) {
        let validationError = false;
        let allElements = document.getElementsByTagName("*");

        for (let i = 0, max = allElements.length; i < max; i++) {
          if (allElements[i].type === 'text' && allElements[i].required && !(allElements[i].value && allElements[i].value.length > 0)) {
            validationError = true;
          }
        }

        if (!validationError) {
          if (document.getElementById('pkginstallopt').checked) {
            document.addprocessform.pkginstallopt.value = true;
          }
          if (document.getElementById('bootstartopt').checked) {
            document.addprocessform.bootstartopt.value = true;
          }
          document.getElementById('addproject-page').classList.add('addproject-loading');
          document.getElementById('loader-div').classList.add('loader');
        }
      } else {
        document.getElementById('addproject-page').classList.add('addproject-loading');
        document.getElementById('loader-div').classList.add('loader');
      }
    }
    function addDomElem(parentId, elementType, attributes, breakline) {
      var parent = document.getElementById(parentId);
      if (parent) {
        if (breakline) {
          var breakline = document.createElement("br");
          parent.appendChild(breakline);
        }
        var input = document.createElement(elementType);
        for (const key in attributes) {
          if (key === 'innerHTML') {
            input[key] = attributes[key];
          } else {
            input.setAttribute(key, attributes[key]);
          }
        }
        if (elementType === 'input') {
          parent.append(' ');
        }
        parent.appendChild(input);
        if (attributes.type === 'checkbox') {
          parent.append(' ');
        }
      }
    }
    function addNewJob(event) {
      if (event) {
        event.preventDefault();
      }
      var jobParentDiv = document.getElementById('cron-jobs-items');
      var currentCount = jobParentDiv.getElementsByTagName('div').length;
      currentCount = currentCount > 0 ? currentCount + 1 : 0;
      var divId = 'job-div-' + currentCount;
      addDomElem('cron-jobs-items', "div", { id: divId });
      addDomElem(divId, "input", { id: 'job-name-' + currentCount, name: 'job-name-' + currentCount, type: 'text', style: 'width: 30% !important;', placeholder: 'Name of the job' }, true);
      addDomElem(divId, "input", { id: 'job-path-' + currentCount, name: 'job-path-' + currentCount, type: 'text', style: 'width: 30% !important;', placeholder: 'Starting file path of the job' });
      addDomElem(divId, "input", { name: 'job-status-' + currentCount, id: 'job-status-' + currentCount, type: 'checkbox' });
      addDomElem(divId, "label", { for: 'job-status-' + currentCount, innerHTML: 'Enabled' });
      addDomElem(divId, "input", { name: 'job-remove-' + currentCount, id: 'job-remove-' + currentCount, class: 'button-sm-red', value: 'Remove', onclick: 'removeJob(event,' + currentCount + ')', type: 'button' });
    }
    function deleteJobDiv(index) {
      let jobDiv = document.getElementById('job-div-' + index);
      if (jobDiv) {
        jobDiv.remove();
      }
    }
    function removeJob(event, index) {
      if (event) {
        event.preventDefault();
      }
      let jobName = document.getElementById('job-name-' + index).value;
      let jobPath = document.getElementById('job-path-' + index).value;

      if ((jobName && jobName !== '') || (jobPath && jobPath !== '')) {
        let confirmation = confirm('Are you sure to remove this job ?');
        if (confirmation) {
          deleteJobDiv(index);
        }
      } else {
        deleteJobDiv(index);
      }
    }
    function setDefaults() {
      setTimeout(() => {
        let successElement = document.getElementById('success-msg');
        if (successElement) {
          successElement.remove()
        }
      }, 5000);
      let clonedUID = '<%=clonedUID%>';
      if (clonedUID && window.location.pathname.indexOf('clone') > -1) {
        window.history.pushState({}, document.title, '/process/add?edit=true&UID=' + clonedUID);
      }
    }
    setDefaults();
  </script>
</head>

<body>
  <div id="loader-div" style="display: none;" class=""><br /><br /><br /><br /><br />
    <image class="loader-image" src="../images?name=loading.gif">
  </div>
  <div id="addproject-page" class="">
    <div class="table-heading">
      <h2>Add Project</h2>
    </div>

    <div class="container">
      <form name="addprocessform" action="add-process">
        <span id="success-msg" class="success-message"><b>
            <%= successMsg %>
          </b></span>

        <span class="error-message"><b>
            <%= errMsg %>
          </b></span>
        <%if (errMsg) { %>
          <br /><br />
          <% } %>

            <label for="name">Name<span class="required-field">*</span></label>
            <input type="text" id="name" name="name" placeholder="Project name" required>

            <label for="port">Port<span class="required-field">*</span> <span class="tooltip">&#9432;
                <span class="tooltiptext port-tooltip">This value will be passed as an environment variable into the
                  node
                  process and it
                  can
                  be accessed from <b>process.env.port</b> variable</span></span>
              <span class="tooltip">&#63;<span class="tooltiptext port-reason-tooltip"><b>Why this is required
                    ?</b><br />NDA checks the availability of port before starting the
                  project to avoid port conflicts between the processes.<br /><br /><b>How this works
                    ?</b><br />To make this work, port has to be accessed from environment variable instead of hard
                  coding it. <br />For Example, if your project has code like <q>port = 9000</q>, then it should be
                  changed
                  as <q>port = process.env.port</q></span></span>
            </label>
            <input type="text" id="port" name="port" placeholder="Project port" required>

            <label for="projectpath">Base Path<span class="required-field">*</span> <span class="tooltip">&#9432;<span
                  class="tooltiptext project-basepath-tooltip">Provide the folder
                  path of the project. <br /> Example:
                  E:/ProjectName/ or /opt/projects/ProjectName/</span></span></label>
            <input type="text" name="projectpath" placeholder="Project's base path" required id="projectpath">

            <label for="startfilepath">Start File Path<span class="required-field">*</span> <span
                class="tooltip">&#9432;<span class="tooltiptext project-startpath-tooltip">Provide
                  the starting file path of the project. <br /> Example:
                  index.js or bin/index.js</span></span></label>
            <input type="text" name="startfilepath" placeholder="Project's start file path" required id="startfilepath">

            <input style="display: none;" type="text" name="UID" id="UID">

            <label for="envvariables">Environment Variables <span class="tooltip">&#9432;<span
                  class="tooltiptext">Provide
                  variables that are has to be passed as the environment variables (if
                  any).<br />Example:<br />{<br />
                  NODE_ENV: 'production',<br /> key: 'PROJECT_KEY'<br />}</span></span></label>
            <textarea style="height:200px" name="envvariables" placeholder="Environment Variables as JSON"
              id="envvariables"></textarea>

            <label for="jobslist">Cron Jobs <span class="tooltip">&#9432;<span
                  class="tooltiptext cronjob-tooltip">Configure your
                  project's cron jobs (if any)</span></span></label>
            <br /><br />
            <label for="jobsadd"> <span class="tooltip"><input type="image" class="action-button"
                  src="../images?name=add-project.png" onclick="addNewJob(event)" alt="Add a new job row"> <span
                  class="tooltiptext add-cronjob-tooltip">Add one more
                  job entry</span></span></label>
            <div id="cron-jobs-items">
              <%if (fields.jobs && fields.jobs.length> 0) { %>
                <% fields.jobs.forEach(function(item,index){ %>
                  <div id="job-div-<%= index + 1 %>">
                    <input type="text" style="width: 30% !important;" name="job-name-<%= index + 1 %>"
                      id="job-name-<%= index + 1 %>" placeholder="Name of the job" />
                    <input type="text" style="width: 30% !important;" name="job-path-<%= index + 1 %>"
                      id="job-path-<%= index + 1 %>" placeholder="Starting file path of the job" />
                    <input type="checkbox" name="job-status-<%= index + 1 %>" id="job-status-<%= index + 1 %>" />
                    <label for="job-status-<%= index + 1 %>">Enabled</label>
                    <input class="button-sm-red" type="button" name="job-remove-<%= index + 1 %>"
                      id="job-remove-<%= index + 1 %>" value="Remove" onclick="removeJob(event,'<%= index+1 %>')" />
                  </div>
                  <% }) %>
                    <% } %>
            </div>

            <input type="checkbox" name="pkginstallopt" id="pkginstallopt" />
            <label for="pkginstallopt">Install Packages <span class="tooltip">&#9432;<span
                  class="tooltiptext packages-tooltip">If
                  enabled,
                  system will do npm install each time, before starting the project.</span></span></label>
            <br /><br />
            <input type="checkbox" name="bootstartopt" id="bootstartopt" />
            <label for="bootstartopt">Start-on-boot <span class="tooltip">&#9432;<span
                  class="tooltiptext bootstart-tooltip">If
                  enabled,
                  this project will be started on the system start up. <br /> This will work only if the
                  <b>Start-on-boot</b> option is enabled in the <b>Configuration</b> page</span></span></label>
            <br /><br />
            <input type="submit" value="Submit" class="button-green" onclick="enableLoader(true);">
            <button class="button-black" onclick="enableLoader(false,event);window.location.href='/'">Back</button>
      </form>
    </div>
  </div>
</body>

</html>